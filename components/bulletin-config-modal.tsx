"use client"

import { Button } from "@/components/ui/button"
import { useState, useEffect, useRef } from "react"
import { toast } from 'sonner'
import { Article } from "./bulletin-generator"

export interface BulletinConfig {
  // Header Section
  headerText: string
  headerImage: string
  issueNumber: string
  publicationDate: string
  publisherLogo: string
  footerImage: string

  // Bulletin Structure
  tableOfContents: boolean
  greetingMessage: string
  keyTrends: boolean
  executiveSummary: boolean
  keyTakeaways: boolean
  interactiveMap: boolean
  calendarSection: boolean

  // Regional Sections
  euSection: {
    enabled: boolean
    title: string
    keyTrends: boolean
    introduction: string
    trends: string
  }
  usSection: {
    enabled: boolean
    title: string
    keyTrends: boolean
    introduction: string
    trends: string
  }
  globalSection: {
    enabled: boolean
    title: string
    keyTrends: boolean
    introduction: string
    trends: string
  }

  // Additional Sections
  calendarMinutes: boolean
  keepAnEyeOn: boolean
  comingEvents: boolean

  // AI Generation Context
  previousGreeting: string
  customInstructions: string

  // AI Generated Content Storage
  generatedContent: {
    keyTrends: string
    executiveSummary: string
    keyTakeaways: string
  }
}

interface BulletinConfigModalProps {
  isOpen: boolean
  onClose: () => void
  config: BulletinConfig
  onConfigChange: (field: keyof BulletinConfig, value: any) => void
  onRandomImage: (field: 'headerImage' | 'footerImage' | 'publisherLogo') => void
  selectedArticlesCount: number
  theme: "blue" | "green" | "red"
  articles: Article[]
}

type ConfigStep = 'header' | 'greeting' | 'content' | 'regional'

export function BulletinConfigModal({
  isOpen,
  onClose,
  config,
  onConfigChange,
  onRandomImage,
  selectedArticlesCount,
  theme,
  articles
}: BulletinConfigModalProps) {
  const [isGenerating, setIsGenerating] = useState<string | null>(null)
  const [activePreview, setActivePreview] = useState<string | null>(null)
  const [currentStep, setCurrentStep] = useState<ConfigStep>('header')
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false)
  const hasAttemptedAutoGenerate = useRef(false)

  const steps: { id: ConfigStep; label: string; description: string }[] = [
    { id: 'header', label: 'Header & Banner', description: 'Configure bulletin header' },
    { id: 'greeting', label: 'Greeting Message', description: 'Set up greeting message' },
    { id: 'content', label: 'AI Content', description: 'Generate main content' },
    { id: 'regional', label: 'Regional Sections', description: 'Configure regions' },
  ]

  const handleRegionalChange = (region: 'euSection' | 'usSection' | 'globalSection', field: string, value: any) => {
    onConfigChange(region, {
      ...config[region],
      [field]: value
    })
  }

  const handleGeneratedContentChange = (field: keyof BulletinConfig['generatedContent'], value: string) => {
    onConfigChange('generatedContent', {
      ...config.generatedContent,
      [field]: value
    })
  }

  // Auto-generate all content when modal opens for the first time with articles
  useEffect(() => {
    if (isOpen && !hasAttemptedAutoGenerate.current && articles.length > 0 && !hasAutoGenerated) {
      hasAttemptedAutoGenerate.current = true
      // Small delay to ensure modal is fully rendered
      setTimeout(() => {
        autoGenerateAllContent()
      }, 500)
    }
  }, [isOpen, articles.length, hasAutoGenerated])

  const autoGenerateAllContent = async () => {
    if (hasAutoGenerated || articles.length === 0) return
    
    setIsGenerating('auto_generate_all')
    setHasAutoGenerated(true)
    
    try {
      const generationPromises = []

      // Always generate greeting message (with or without previous greeting)
      generationPromises.push(generateAIContent('greeting', 'greetingMessage'))

      // Generate main content sections
      generationPromises.push(
        generateAIContent('key_trends', 'keyTrends'),
        generateAIContent('executive_summary', 'executiveSummary'),
        generateAIContent('key_takeaways', 'keyTakeaways')
      )

      // Generate regional content for enabled sections
      const regionalSections = [
        { key: 'euSection' as const, label: 'EU' },
        { key: 'usSection' as const, label: 'US' },
        { key: 'globalSection' as const, label: 'Global' }
      ]

      for (const section of regionalSections) {
        if (config[section.key].enabled) {
          generationPromises.push(
            generateAIContent('section_title', 'title', section.key),
            generateAIContent('section_intro', 'introduction', section.key),
            generateAIContent('section_trends', 'trends', section.key)
          )
        }
      }

      // Execute all generations in parallel for better performance
      await Promise.allSettled(generationPromises)

      toast.success('All SCORE content generated automatically!')
      
      // Auto-advance to content step to show generated content
      setCurrentStep('content')
      
    } catch (error) {
      console.error('Error during auto-generation:', error)
      toast.error('Some content failed to generate automatically')
    } finally {
      setIsGenerating(null)
    }
  }

  const generateAIContent = async (type: string, field: string, region?: string) => {
    // Don't set loading state for individual items during auto-generation to avoid UI flicker
    if (!isGenerating?.includes('auto_generate')) {
      setIsGenerating(type)
    }

    try {
      const regionalArticles = region ?
        articles.filter(article => {
          const jurisdiction = article.jurisdictions?.[0]?.name?.toLowerCase() || ''

          switch (region) {
            case 'euSection':
              return jurisdiction.includes('eu') ||
                jurisdiction.includes('europe') ||
                jurisdiction.includes('european') ||
                article.jurisdictions?.some(j =>
                  j.name.toLowerCase().includes('eu') ||
                  j.name.toLowerCase().includes('europe')
                )
            case 'usSection':
              return jurisdiction.includes('us') ||
                jurisdiction.includes('united states') ||
                jurisdiction.includes('america') ||
                article.jurisdictions?.some(j =>
                  j.name.toLowerCase().includes('us') ||
                  j.name.toLowerCase().includes('united states')
                )
            case 'globalSection':
              return !jurisdiction.includes('eu') &&
                !jurisdiction.includes('europe') &&
                !jurisdiction.includes('us') &&
                !jurisdiction.includes('united states') &&
                !article.jurisdictions?.some(j =>
                  j.name.toLowerCase().includes('eu') ||
                  j.name.toLowerCase().includes('europe') ||
                  j.name.toLowerCase().includes('us') ||
                  j.name.toLowerCase().includes('united states')
                )
            default:
              return true
          }
        }) : articles

      // Skip if no articles for this region
      if (regionalArticles.length === 0) {
        console.warn(`No articles found for ${region}, skipping generation`)
        return
      }

      console.log(`Generating ${type} for ${region} with ${regionalArticles.length} articles`)

      const requestBody: any = {
        type,
        articles: regionalArticles,
        region: region?.replace('Section', '').toUpperCase(),
        currentDate: config.publicationDate
      }

      // Add context-specific data based on the type
      switch (type) {
        case 'greeting':
          // Include previous greeting if available, but it's no longer required
          requestBody.previousGreeting = config.previousGreeting
          requestBody.customInstructions = config.customInstructions
          break
        case 'key_trends':
        case 'executive_summary':
        case 'key_takeaways':
        case 'section_trends':
          requestBody.customInstructions = config.customInstructions
          break
      }

      const response = await fetch('/api/generate-bulletin-content', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      })

      if (!response.ok) {
        throw new Error('Failed to generate content')
      }

      const data = await response.json()

      if (data.error) {
        throw new Error(data.error)
      }

      // Update the appropriate field
      switch (type) {
        case 'greeting':
          onConfigChange('greetingMessage', data.content)
          break
        case 'key_trends':
          handleGeneratedContentChange('keyTrends', data.content)
          setActivePreview('keyTrends')
          break
        case 'executive_summary':
          handleGeneratedContentChange('executiveSummary', data.content)
          setActivePreview('executiveSummary')
          break
        case 'key_takeaways':
          handleGeneratedContentChange('keyTakeaways', data.content)
          setActivePreview('keyTakeaways')
          break
        case 'section_title':
          if (region) {
            handleRegionalChange(region as any, 'title', data.content)
          }
          break
        case 'section_intro':
          if (region) {
            handleRegionalChange(region as any, 'introduction', data.content)
          }
          break
        case 'section_trends':
          if (region) {
            handleRegionalChange(region as any, 'trends', data.content)
            setActivePreview(`${region}_trends`)
          }
          break
        default:
          break
      }

      // Only show individual success toasts during manual generation, not auto-generation
      if (!isGenerating?.includes('auto_generate')) {
        toast.success('SCORE content generated successfully!')
      }
      
      return data.content
    } catch (error) {
      console.error('Error generating content:', error)
      // Only show error toasts during manual generation
      if (!isGenerating?.includes('auto_generate')) {
        toast.error('Failed to generate AI content')
      }
      throw error // Re-throw to handle in auto-generation
    } finally {
      // Only clear individual loading states during manual generation
      if (!isGenerating?.includes('auto_generate')) {
        setIsGenerating(null)
      }
    }
  }

  const togglePreview = (previewId: string) => {
    setActivePreview(activePreview === previewId ? null : previewId)
  }

  const nextStep = () => {
    const currentIndex = steps.findIndex(step => step.id === currentStep)
    if (currentIndex < steps.length - 1) {
      setCurrentStep(steps[currentIndex + 1].id)
    }
  }

  const prevStep = () => {
    const currentIndex = steps.findIndex(step => step.id === currentStep)
    if (currentIndex > 0) {
      setCurrentStep(steps[currentIndex - 1].id)
    }
  }

  // Reset auto-generation state when modal closes
  useEffect(() => {
    if (!isOpen) {
      hasAttemptedAutoGenerate.current = false
      setHasAutoGenerated(false)
    }
  }, [isOpen])

  if (!isOpen) return null

  const renderStepContent = () => {
    switch (currentStep) {
      case 'header':
        return (
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h4 className="text-lg font-semibold border-b pb-2">Header & Banner</h4>
              {!hasAutoGenerated && articles.length > 0 && (
                <Button
                  onClick={autoGenerateAllContent}
                  disabled={isGenerating === 'auto_generate_all'}
                  className="bg-green-600 hover:bg-green-700 text-white text-sm font-medium py-2 px-4 rounded"
                >
                  {isGenerating === 'auto_generate_all' ? 'Auto-Generating...' : 'Auto-Generate All Content'}
                </Button>
              )}
            </div>
            
            {articles.length === 0 && (
              <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                <p className="text-yellow-800 text-sm">
                  No articles selected. Please select articles first to enable auto-generation.
                </p>
              </div>
            )}

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label htmlFor="header-text" className="block text-sm font-medium mb-2">
                  Bulletin Title
                </label>
                <input
                  type="text"
                  id="header-text"
                  value={config.headerText}
                  onChange={(e) => onConfigChange('headerText', e.target.value)}
                  placeholder="ESG Bulletin"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-gray-500 focus:border-transparent"
                />
              </div>

              <div>
                <label htmlFor="issue-number" className="block text-sm font-medium mb-2">
                  Issue Number
                </label>
                <input
                  type="text"
                  id="issue-number"
                  value={config.issueNumber}
                  onChange={(e) => onConfigChange('issueNumber', e.target.value)}
                  placeholder="e.g., Issue #1"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-gray-500 focus:border-transparent"
                />
              </div>
            </div>

            <div>
              <label htmlFor="publication-date" className="block text-sm font-medium mb-2">
                Publication Date (Month Covered)
              </label>
              <input
                type="month"
                id="publication-date"
                value={config.publicationDate}
                onChange={(e) => onConfigChange('publicationDate', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-gray-500 focus:border-transparent"
              />
            </div>

            <div>
              <div className="flex items-center justify-between mb-2">
                <label htmlFor="header-image" className="block text-sm font-medium">
                  Banner Image URL
                </label>
                <Button
                  type="button"
                  onClick={() => onRandomImage('headerImage')}
                  className="bg-gray-600 hover:bg-gray-700 text-white text-xs font-medium py-1 px-3 rounded"
                >
                  Random Image
                </Button>
              </div>
              <input
                type="url"
                id="header-image"
                value={config.headerImage}
                onChange={(e) => onConfigChange('headerImage', e.target.value)}
                placeholder="https://example.com/banner-image.jpg"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-gray-500 focus:border-transparent"
              />
              <p className="text-xs text-gray-500 mt-2">
                Background picture that illustrates the theme or topic
              </p>
            </div>

            <div>
              <div className="flex items-center justify-between mb-2">
                <label htmlFor="publisher-logo" className="block text-sm font-medium">
                  Publisher Logo URL
                </label>
                <Button
                  type="button"
                  onClick={() => onRandomImage('publisherLogo')}
                  className="bg-gray-600 hover:bg-gray-700 text-white text-xs font-medium py-1 px-3 rounded"
                >
                  Random Image
                </Button>
              </div>
              <input
                type="url"
                id="publisher-logo"
                value={config.publisherLogo}
                onChange={(e) => onConfigChange('publisherLogo', e.target.value)}
                placeholder="https://example.com/logo.png"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-gray-500 focus:border-transparent"
              />
            </div>

            <div>
              <div className="flex items-center justify-between mb-2">
                <label htmlFor="footer-image" className="block text-sm font-medium">
                  Footer Image URL
                </label>
                <Button
                  type="button"
                  onClick={() => onRandomImage('footerImage')}
                  className="bg-gray-600 hover:bg-gray-700 text-white text-xs font-medium py-1 px-3 rounded"
                >
                  Random Image
                </Button>
              </div>
              <input
                type="url"
                id="footer-image"
                value={config.footerImage}
                onChange={(e) => onConfigChange('footerImage', e.target.value)}
                placeholder="https://example.com/footer-image.jpg"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-gray-500 focus:border-transparent"
              />
            </div>
          </div>
        )

      case 'greeting':
        return (
          <div className="space-y-6">
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <h4 className="text-lg font-semibold text-blue-800 mb-2">Greeting Message Setup</h4>
              <p className="text-sm text-blue-700">
                The AI will generate a new greeting message. If you provide last month's greeting, it will maintain consistent tone.
              </p>
            </div>

            <div>
              <label htmlFor="previous-greeting" className="block text-sm font-medium mb-2">
                Previous Month's Greeting Message (Optional)
              </label>
              <textarea
                id="previous-greeting"
                value={config.previousGreeting}
                onChange={(e) => onConfigChange('previousGreeting', e.target.value)}
                placeholder="Paste the greeting message from last month's bulletin for context (optional)..."
                rows={4}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-gray-500 focus:border-transparent resize-none"
              />
              <p className="text-xs text-gray-500 mt-2">
                Optional: Used as reference for maintaining consistent tone in new greeting messages
              </p>
            </div>

            <div>
              <div className="flex items-center justify-between mb-2">
                <label htmlFor="greeting-message" className="block text-sm font-medium">
                  Greeting Message (Editor's Note)
                </label>
                <div className="flex items-center gap-2">
                  {config.greetingMessage && (
                    <Button
                      type="button"
                      onClick={() => onConfigChange('greetingMessage', '')}
                      variant="outline"
                      className="text-xs border-red-300 text-red-600 hover:bg-red-50"
                    >
                      Clear
                    </Button>
                  )}
                  <Button
                    type="button"
                    onClick={() => generateAIContent('greeting', 'greetingMessage')}
                    disabled={isGenerating === 'greeting'}
                    className="bg-blue-600 hover:bg-blue-700 text-white text-xs font-medium py-1 px-3 rounded"
                  >
                    {isGenerating === 'greeting' ? 'Generating...' : 'AI Generate Greeting'}
                  </Button>
                </div>
              </div>
              <textarea
                id="greeting-message"
                value={config.greetingMessage}
                onChange={(e) => onConfigChange('greetingMessage', e.target.value)}
                placeholder="Light, playful tone reflecting current month and season..."
                rows={4}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-gray-500 focus:border-transparent resize-none"
              />
              <p className="text-xs text-gray-500 mt-2 italic">
                This message will be displayed in italics as an introductory editor's note
              </p>
            </div>

            <div>
              <label htmlFor="custom-instructions" className="block text-sm font-medium mb-2">
                Custom Instructions for AI Generation
              </label>
              <textarea
                id="custom-instructions"
                value={config.customInstructions}
                onChange={(e) => onConfigChange('customInstructions', e.target.value)}
                placeholder="Any specific tone, style, or content requirements for AI-generated content..."
                rows={3}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-gray-500 focus:border-transparent resize-none"
              />
            </div>
          </div>
        )
      case 'content':
        return (
          <div className="space-y-6">
            <h4 className="text-lg font-semibold border-b pb-2">AI Generated Content</h4>

            <div className="border border-gray-200 rounded-lg">
              <div className="flex items-center justify-between p-4 bg-gray-50">
                <h4 className="font-medium">5 Key Trends</h4>
                <div className="flex items-center gap-3">
                  <Button
                    type="button"
                    onClick={() => generateAIContent('key_trends', 'keyTrends')}
                    disabled={isGenerating === 'key_trends'}
                    className="bg-gray-700 hover:bg-gray-800 text-white text-xs font-medium py-1 px-3 rounded"
                  >
                    {isGenerating === 'key_trends' ? 'Generating...' : 'Regenerate Trends'}
                  </Button>
                  <Button
                    type="button"
                    onClick={() => togglePreview('keyTrends')}
                    variant="outline"
                    className="text-xs border-gray-300"
                  >
                    {activePreview === 'keyTrends' ? 'Hide Preview' : 'Show Preview'}
                  </Button>
                </div>
              </div>
              {activePreview === 'keyTrends' && (
                <div className="p-4 border-t">
                  <textarea
                    value={config.generatedContent.keyTrends}
                    onChange={(e) => handleGeneratedContentChange('keyTrends', e.target.value)}
                    placeholder="5 key trends will appear here after generation. Each trend should be about 70 characters with spaces."
                    rows={6}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-gray-500 focus:border-transparent resize-none"
                  />
                  <p className="text-xs text-gray-500 mt-2">
                    Edit the generated key trends as needed. Each trend should be about 70 characters with spaces.
                  </p>
                </div>
              )}
            </div>

            <div className="border border-gray-200 rounded-lg">
              <div className="flex items-center justify-between p-4 bg-gray-50">
                <h4 className="font-medium">Executive Summary</h4>
                <div className="flex items-center gap-3">
                  <Button
                    type="button"
                    onClick={() => generateAIContent('executive_summary', 'executiveSummary')}
                    disabled={isGenerating === 'executive_summary'}
                    className="bg-gray-700 hover:bg-gray-800 text-white text-xs font-medium py-1 px-3 rounded"
                  >
                    {isGenerating === 'executive_summary' ? 'Generating...' : 'Regenerate Summary'}
                  </Button>
                  <Button
                    type="button"
                    onClick={() => togglePreview('executiveSummary')}
                    variant="outline"
                    className="text-xs border-gray-300"
                  >
                    {activePreview === 'executiveSummary' ? 'Hide Preview' : 'Show Preview'}
                  </Button>
                </div>
              </div>
              {activePreview === 'executiveSummary' && (
                <div className="p-4 border-t">
                  <textarea
                    value={config.generatedContent.executiveSummary}
                    onChange={(e) => handleGeneratedContentChange('executiveSummary', e.target.value)}
                    placeholder="Executive summary will appear here after generation. Maximum 200 words."
                    rows={8}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-gray-500 focus:border-transparent resize-none"
                  />
                  <p className="text-xs text-gray-500 mt-2">
                    Edit the generated executive summary as needed. Maximum 200 words.
                  </p>
                </div>
              )}
            </div>

            <div className="border border-gray-200 rounded-lg">
              <div className="flex items-center justify-between p-4 bg-gray-50">
                <h4 className="font-medium">Key Takeaways</h4>
                <div className="flex items-center gap-3">
                  <Button
                    type="button"
                    onClick={() => generateAIContent('key_takeaways', 'keyTakeaways')}
                    disabled={isGenerating === 'key_takeaways'}
                    className="bg-gray-700 hover:bg-gray-800 text-white text-xs font-medium py-1 px-3 rounded"
                  >
                    {isGenerating === 'key_takeaways' ? 'Generating...' : 'Regenerate Takeaways'}
                  </Button>
                  <Button
                    type="button"
                    onClick={() => togglePreview('keyTakeaways')}
                    variant="outline"
                    className="text-xs border-gray-300"
                  >
                    {activePreview === 'keyTakeaways' ? 'Hide Preview' : 'Show Preview'}
                  </Button>
                </div>
              </div>
              {activePreview === 'keyTakeaways' && (
                <div className="p-4 border-t">
                  <textarea
                    value={config.generatedContent.keyTakeaways}
                    onChange={(e) => handleGeneratedContentChange('keyTakeaways', e.target.value)}
                    placeholder="Key takeaways will appear here after generation. Maximum 200 words."
                    rows={6}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-gray-500 focus:border-transparent resize-none"
                  />
                  <p className="text-xs text-gray-500 mt-2">
                    Edit the generated key takeaways as needed. Maximum 200 words.
                  </p>
                </div>
              )}
            </div>
          </div>
        )

      case 'regional':
        return (
          <div className="space-y-6">
            <h4 className="text-lg font-semibold border-b pb-2">Regional Sections</h4>
            {[
              { key: 'euSection' as const, label: 'EU Section' },
              { key: 'usSection' as const, label: 'US Section' },
              { key: 'globalSection' as const, label: 'Global Section' }
            ].map(({ key, label }) => (
              <div key={key} className="border border-gray-200 rounded-lg p-4">
                <div className="flex items-center justify-between mb-4 pb-2 border-b">
                  <div className="flex items-center gap-3">
                    <h5 className="font-semibold text-lg">{label}</h5>
                    <input
                      type="checkbox"
                      checked={config[key].enabled}
                      onChange={(e) => handleRegionalChange(key, 'enabled', e.target.checked)}
                      className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500"
                    />
                  </div>
                </div>

                {config[key].enabled && (
                  <div className="space-y-4">
                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <label className="block text-sm font-medium">Section Title</label>
                        <Button
                          type="button"
                          onClick={() => generateAIContent('section_title', 'title', key)}
                          disabled={isGenerating === `section_title_${key}`}
                          className="bg-gray-700 hover:bg-gray-800 text-white text-xs font-medium py-1 px-3 rounded"
                        >
                          {isGenerating === `section_title_${key}` ? 'Generating...' : 'Regenerate Title'}
                        </Button>
                      </div>
                      <input
                        type="text"
                        value={config[key].title}
                        onChange={(e) => handleRegionalChange(key, 'title', e.target.value)}
                        placeholder={`Catchy, creative, playful title for ${label}...`}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-gray-500 focus:border-transparent"
                      />
                    </div>

                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <label className="block text-sm font-medium">Section Introduction</label>
                        <Button
                          type="button"
                          onClick={() => generateAIContent('section_intro', 'introduction', key)}
                          disabled={isGenerating === `section_intro_${key}`}
                          className="bg-gray-700 hover:bg-gray-800 text-white text-xs font-medium py-1 px-3 rounded"
                        >
                          {isGenerating === `section_intro_${key}` ? 'Generating...' : 'Regenerate Intro'}
                        </Button>
                      </div>
                      <textarea
                        value={config[key].introduction}
                        onChange={(e) => handleRegionalChange(key, 'introduction', e.target.value)}
                        placeholder={`Practical and engaging introduction for ${label} (max 150 words)...`}
                        rows={3}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-gray-500 focus:border-transparent resize-none"
                      />
                    </div>

                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <label className="block text-sm font-medium">3 Key Trends for {label}</label>
                        <div className="flex items-center gap-2">
                          <input
                            type="checkbox"
                            checked={config[key].keyTrends}
                            onChange={(e) => handleRegionalChange(key, 'keyTrends', e.target.checked)}
                            className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500"
                          />
                          <Button
                            type="button"
                            onClick={() => generateAIContent('section_trends', 'trends', key)}
                            disabled={isGenerating === `section_trends_${key}`}
                            className="bg-gray-700 hover:bg-gray-800 text-white text-xs font-medium py-1 px-3 rounded"
                          >
                            {isGenerating === `section_trends_${key}` ? 'Generating...' : 'Regenerate Trends'}
                          </Button>
                        </div>
                      </div>
                      {config[key].keyTrends && (
                        <textarea
                          value={config[key].trends || ''}
                          onChange={(e) => handleRegionalChange(key, 'trends', e.target.value)}
                          placeholder={`3 key trends for ${label} will appear here after generation...`}
                          rows={4}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-gray-500 focus:border-transparent resize-none"
                        />
                      )}
                      <p className="text-xs text-gray-500 mt-2">
                        Edit the generated regional trends as needed. Each trend should be concise.
                      </p>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        )
      default:
        return null
    }
  }

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] flex flex-col">
        <div className="flex justify-between items-center p-6 border-b shrink-0">
          <div>
            <h3 className="text-xl font-bold">Configure SCORE Bulletin</h3>
            <p className="text-sm text-gray-600 mt-1">
              Customize your ESG Regulatory Bulletin ({selectedArticlesCount} articles selected)
              {hasAutoGenerated && (
                <span className="text-green-600 font-medium ml-2">• Auto-generated content ready</span>
              )}
            </p>
          </div>
          <button
            onClick={onClose}
            className="text-gray-500 hover:text-gray-700 text-2xl font-bold"
          >
            ×
          </button>
        </div>

        {/* Stepper Navigation */}
        <div className="border-b">
          <div className="flex justify-between p-4">
            {steps.map((step, index) => (
              <div key={step.id} className="flex items-center">
                <button
                  onClick={() => setCurrentStep(step.id)}
                  className={`flex items-center justify-center w-8 h-8 rounded-full text-sm font-medium ${currentStep === step.id
                      ? 'bg-gray-800 text-white'
                      : steps.findIndex(s => s.id === currentStep) > index
                        ? 'bg-gray-600 text-white'
                        : 'bg-gray-200 text-gray-600'
                    }`}
                >
                  {steps.findIndex(s => s.id === currentStep) > index ? '✓' : index + 1}
                </button>
                <div className="ml-2">
                  <div className={`text-xs font-medium ${currentStep === step.id ? 'text-gray-800' : 'text-gray-500'
                    }`}>
                    {step.label}
                  </div>
                  <div className="text-xs text-gray-400">{step.description}</div>
                </div>
                {index < steps.length - 1 && (
                  <div className={`ml-4 w-8 h-0.5 ${steps.findIndex(s => s.id === currentStep) > index ? 'bg-gray-600' : 'bg-gray-200'
                    }`} />
                )}
              </div>
            ))}
          </div>
        </div>

        {/* Step Content */}
        <div className="flex-1 overflow-y-auto p-6">
          {renderStepContent()}

          {/* AI Generation Status */}
          {isGenerating && (
            <div className="bg-gray-50 border border-gray-200 rounded-lg p-4 mt-6">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div className="w-4 h-4 border-2 border-gray-600 border-t-transparent rounded-full animate-spin" />
                  <span className="text-sm font-medium text-gray-800">
                    {isGenerating === 'auto_generate_all' 
                      ? 'Auto-generating all content...' 
                      : `Generating ${isGenerating.replace('_', ' ')}...`}
                  </span>
                </div>
                <span className="text-xs text-gray-600">
                  This may take a few seconds
                </span>
              </div>
              {isGenerating === 'auto_generate_all' && (
                <p className="text-xs text-gray-600 mt-2">
                  Generating greeting, key trends, executive summary, key takeaways, and regional content...
                </p>
              )}
            </div>
          )}
        </div>

        {/* Navigation Buttons */}
        <div className="flex justify-between p-6 border-t bg-gray-50 shrink-0">
          <div>
            {currentStep !== 'header' && (
              <Button
                onClick={prevStep}
                className="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"
              >
                Previous
              </Button>
            )}
          </div>
          <div className="flex gap-3">
            {!hasAutoGenerated && articles.length > 0 && (
              <Button
                onClick={autoGenerateAllContent}
                disabled={isGenerating === 'auto_generate_all'}
                className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"
              >
                {isGenerating === 'auto_generate_all' ? 'Auto-Generating...' : 'Auto-Generate All'}
              </Button>
            )}
            <Button
              onClick={onClose}
              className="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"
            >
              Cancel
            </Button>
            {currentStep !== 'regional' ? (
              <Button
                onClick={nextStep}
                className="bg-gray-800 hover:bg-gray-900 text-white font-bold py-2 px-4 rounded"
              >
                Next
              </Button>
            ) : (
              <Button
                onClick={onClose}
                className="bg-gray-800 hover:bg-gray-900 text-white font-bold py-2 px-4 rounded"
              >
                Save Configuration
              </Button>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}